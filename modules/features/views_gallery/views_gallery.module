<?php
/**
 * @file
 * Creates photo gallery feature, including image and gallery content types.
 */
 
include_once('views_gallery.features.inc');

/**
* Implementation of hook_help().
*/
function views_gallery_help($path) {
  // Central help page content.
  if ($path == 'admin/help#views_gallery') {
    $help = '<h3>'. t('Views Gallery') .'</h3>';
    $help .= '<p>'. t("Views Gallery lets you post photos which will show up in a gallery.") .'</p>';
    $help .= '<p>'. t("Add either galleries or images. To add photos, navigate to a gallery and click the \"Add image\" button.  Then click \"Save\".") .'</p>';
    return $help;
  }
}

/**
 * The content types to use for the image and gallery.
 * 
 * Modules and profiles can alter these values
 * by doing varible_set() to change this value 
 * before installing this module.
 */
function views_gallery_image_type() {
  return variable_get('views_gallery_image_type', 'gallery_image');
}

function views_gallery_gallery_type() {
  return variable_get('views_gallery_gallery_type', 'gallery');
}

/**
 * Implementation of hook_menu().
 */
function views_gallery_menu() {
  $items = array();
  $items['admin/settings/views_gallery'] = array(
    'title' => 'Views Gallery',
    'description' => 'Configure the Views Gallery content types.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('views_gallery_settings_form'),
    'access arguments' => array('administer content types'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

function views_gallery_settings_form() {
  $form = array();
  $options = node_get_types('names');
  $form['views_gallery_gallery_type'] = array(
    '#title' => t('Views Gallery Gallery Type'),
    '#description' => t('Set the content type that will be used for galleries.'),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => views_gallery_gallery_type(),
    );  
  $form['views_gallery_image_type'] = array(
    '#title' => t('Views Gallery Image Type'),
    '#description' => t('Set the content type that will be used for gallery images.'),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => views_gallery_image_type(),
    );
  return system_settings_form($form);   
}

/**
 * Implementation of hook_init().
 */
function views_gallery_init() {
  if (user_access('administer site configuration') && module_exists('imageapi') && !module_exists('imageapi_gd') && !module_exists('imageapi_imagemagick')) {
    drupal_set_message(t('Image API requires that an image toolkit be enabled before it will work! Please enable an image toolkit on the <a href="!link">modules page</a>.', array('!link' => url('admin/build/modules'))), 'error');
  }
  drupal_add_css(drupal_get_path('module', 'views_gallery') .'/views_gallery.css');
  if (module_exists('views_slideshow_singleframe')) {
    drupal_add_css(drupal_get_path('module', 'views_slideshow_singleframe') .'/views_slideshow_singleframe.css');  
  }
}

/**
 * Make sure image nodes are not added to 'all nodes' 
 * simpleviews listings, since we have a special gallery 
 * view to handle images.
 */
function views_gallery_simpleview_alter(&$view, $data) {
  if ($data['filter'] == 'all nodes' && $view->name != views_gallery_image_type()) {
    $display = $view->display['default'];

    $filters['type'] = array(
      'operator' => 'not in',
      'value' => array(views_gallery_image_type() => views_gallery_image_type()),
      'group' => '0',
      'exposed' => FALSE,
      'expose' => array('operator' => FALSE, 'label' => ''),
      'id' => 'type',
      'table' => 'node',
      'field' => 'type',
      'relationship' => 'none',
    );
    
    $display->handler->override_option('filters', $filters);
  }
}

/**
 * Alter the Views Gallery default view
 * depending on whether spaces, lightbox2,
 * or views_slideshow are enabled.
 */
function views_gallery_views_default_views_alter(&$cache) {
  // If Spaces is not installed, remove spaces 
  // filter from our views.
  if (!module_exists('spaces')) {
    $view = $cache['gallery'];
    unset($view->display['default']->display_options['filters']['current']);
    $cache['gallery'] = $view;
    
    $view = $cache['gallery_list'];
    unset($view->display['default']->display_options['filters']['current']);
    $cache['gallery_list'] = $view;
  }
  // If Views Slideshow is not installed
  // remove the slideshow block.
  if (!module_exists('views_slideshow')) {
    $view = $cache['gallery'];
    unset($view->display['block_2']);
    $cache['gallery'] = $view;
  } 
  // If lightbox is not installed, change the image
  // formatter to a link to the image node and
  // remove the 'View slideshow' link in the header.   
  if (!module_exists('lightbox2')) {
    $view = $cache['gallery'];
    $display = $view->display['default']->display_options;
    $display['fields']['field_gallery_image_fid']['format'] = 'thumb_linked'; 
    $view->display['default']->display_options = $display;
    $display = $view->display['node_content_1']->display_options;
    $display['header'] = '';
    $view->display['node_content_1']->display_options = $display;
    $cache['gallery'] = $view;
  }
}