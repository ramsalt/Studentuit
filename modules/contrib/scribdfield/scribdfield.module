<?php
/**
 * @file
 * Enables CCK FileField integration with Scribd.com.
 */

define('SCRIBDFIELD_PLATFORM_CURL', 'curl');
define('SCRIBDFIELD_PLATFORM_FOPEN', 'fopen');
define('SCRIBDFIELD_PLATFORM_EITHER', 'either');

/**
 * Implementation of hook_menu().
 */
function scribdfield_menu() {
  $items = array();

  $items['admin/settings/scribdfield'] = array(
    'access arguments'  => array('administer site configuration'),
    'description'       => 'Configure ScribdField integration with Scribd.com.',
    'file'              => 'scribdfield.admin.inc',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('scribdfield_admin_settings_form'),
    'title'             => 'ScribdField',
  );

  return $items;
}

/**
 * Implementation of hook_elements().
 */
function scribdfield_elements() {
  $filefield_elements = filefield_elements();
  $elements['scribdfield_widget'] = $filefield_elements['filefield_widget'];
  $elements['scribdfield_widget']['#process'][] = 'scribdfield_widget_process';
  return $elements;
}

/**
 * Implementation of CCK's hook_widget_info().
 */
function scribdfield_widget_info() {
  return array(
    'scribdfield_widget' => array(
      'label'         => t('Scribd Upload'),
      'field types'   => array('filefield'),
      'callbacks'     => array('default value' => CONTENT_CALLBACK_CUSTOM),
      'description'   => t('A widget which sends its uploaded files to Scribd.com.'),
    ),
  );
}

/**
 * Implementation of CCK's hook_widget().
 */
function scribdfield_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  return filefield_widget($form, $form_state, $field, $items, $delta);
}

/**
 * Implementation of CCK's hook_field_settings().
 */
function scribdfield_field_settings($op, $widget) {
  return filefield_field_settings($op, $widget);
}

/**
 * Implementation of CCK's hook_widget_settings().
 */
function scribdfield_widget_settings($op, $widget) {
  switch ($op) {
    case 'form':
      return filefield_widget_settings_form($widget);
    case 'save':
      return filefield_widget_settings_save($widget);
  }
}

/**
 * Form API #process callback; see hook_elements().
 */
function scribdfield_widget_process($element, $edit, &$form_state, $form) {
  // On node resave, the default value for the data will in some cases
  // not be transfered from the default_value by
  // _form_builder_handle_input_element, so we do it here.
  if (!isset($element['#value']['data']) && isset($element['#default_value']['data']) && is_array($element['#default_value']['data'])) {
    $element['#value']['data'] = $element['#default_value']['data'];
  }

  if (_form_button_was_clicked($element['filefield_remove'])) {
    unset($element['#value']['data']['scribd_doc_id']);
    unset($element['#value']['data']['scribd_access_key']);
    unset($element['#value']['data']['scribd_secret_password']);
    $_SESSION['scribfield_removed_files'][$element['#delta']]++;
  }

  // we have no way of knowing if someone has a) edited the node, b) clicked
  // Remove, c) uploaded a new file to the same delta. For some reason, the
  // 'data' elements are retained even during such a workflow, so we have to
  // keep track of deleted files in SESSION - if they have, we always wipe
  // out our custom values there, so that the file can be handled on presave.
  if ($_SESSION['scribfield_removed_files'][$element['#delta']]) {
    unset($element['#value']['data']['scribd_doc_id']);
    unset($element['#value']['data']['scribd_access_key']);
    unset($element['#value']['data']['scribd_secret_password']);
  }

  if (!empty($element['#value']['filepath'])) {
    $element['data']['scribdfield_warning'] = array(
      '#prefix' => '<div class="description">',
      '#suffix' => '</div>',
      '#value'  => t('Files intended for Scribd.com are not sent until this entire form has been saved. Uploaded files are <strong>never</strong> automatically removed from Scribd.com: if you remove the file or delete this content, you’ll also need to manually remove them from Scribd’s “My documents” page.'),
    );
  }

  $element['public'] = array(
    '#type' => 'hidden',
    '#title' => t('Make uploaded file public.'),
    '#value' => 1,
  );

  return $element;
}

/**
 * Implementation of hook_nodeapi().
 */
function scribdfield_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'presave':
      // Search the node for ScribdField instances.
      foreach ($node as $field_name => $field_value) {
        if (strpos($field_name, 'field_') !== FALSE) {
          $field = content_fields($field_name, $node->type);
          if ($field['widget']['module'] == 'scribdfield') {
            unset($_SESSION['scribfield_removed_files']);
            // We have a winner, update the field.
            _scribdfield_node_presave($node, $field);
          }
        }
      }
      break;

    case 'delete':
      foreach ($node as $node_key => $node_value) {
        if (strpos($node_key, 'field_') !== FALSE) {
          $field = content_fields($node_key, $node->type);
          if ($field['widget']['module'] == 'scribdfield') {
            foreach ($node->{$node_key} as $field_delta => $field_value) {
              if (!empty($node->{$node_key}[$field_delta]['filepath']) && !empty($node->{$node_key}[$field_delta]['data']['scribd_doc_id'])) {
                $files_were_uploaded_to_scribd_so_warn_the_user_mmkay = 1;
              }
            }
          }
        }
      }

      if (isset($files_were_uploaded_to_scribd_so_warn_the_user_mmkay)) { // yeah. that's how I roll.
        drupal_set_message(t('Files were uploaded to Scribd.com: you\'ll need to manually remove them from Scribd\'s "My Docs".'), 'warning');
      }

      break;
  }
}

/**
 * Helper function to handle when the field is saved.
 *
 * @param $node
 *   The node we're working on.
 * @param $field
 *   The CCK field we're working on (from content_fields()).
 */
function _scribdfield_node_presave(&$node, $field) {
  // Upload each file to Scribd.
  foreach ($node->{$field['field_name']} as $field_delta => $field_value) {
    if (($field_value['filepath'])
      && ($field_delta == 'field_scribd')
      && !($field_value['data']['scribd_doc_id']
      && file_exists($node->{$field['field_name']}[$field_delta]['filepath'])) ){

      // Digging deep in the arrays to get the data we need.
      $filepath = $node->{$field['field_name']}[$field_delta]['filepath'];
      $public = (boolean) $node->{$field['field_name']}[$field_delta]['public'];

      // Handle the actual upload.
      $response = scribdfield_api_upload($filepath, $public);

      // On successful upload, store the returned values.
      if (is_array($response)) {
        $node->{$field['field_name']}[$field_delta]['data']['scribd_doc_id']           = $response['doc_id'];
        $node->{$field['field_name']}[$field_delta]['data']['scribd_access_key']       = $response['access_key'];
        $node->{$field['field_name']}[$field_delta]['data']['scribd_secret_password']  = $response['secret_password'];
        $node->{$field['field_name']}[$field_delta]['data']['public'] = $public;
        drupal_set_message(t('@filepath has been uploaded to Scribd.com.',
          array('@filepath' => $node->{$field['field_name']}[$field_delta]['filepath'])));

        // Check to see if printing is meant to be disabled.
        // If so, disable it through Scribd's API.
        if (!$public && variable_get('scribd_secure_files', NULL) && variable_get('scribd_disable_print', NULL)) {
          $response_2 = scribdfield_api_disable_printing($node->{$field['field_name']}[$field_delta]['data']['scribd_doc_id']);
          if ($response_2 !== 0) {
            drupal_set_message(t('Printing was disabled on Scribd.com for your file.'));
          }
          else {
            drupal_set_message(t('Printing could not be disabled for this file.  Delete and try again.'));
          }
        }
      }
      else {
        drupal_set_message(t('@filepath could not be uploaded to Scribd.com.', array('@filepath' => $node->{$field['field_name']}[$field_delta]['filepath'])), 'error');
      }
    }
  }
}

/**
 * Uses Scribd's docs.upload API function to send uploaded file along.
 *
 * http://www.scribd.com/developers/api?method_name=docs.upload
 *
 * @param $filename
 *   Full filename (with path) to the file to upload.
 * @param $public
 *   If TRUE, make the file public on Scribd.com.
 */
function scribdfield_api_upload($filename, $public = TRUE) {
  if (!file_exists($filename)) { return FALSE; }

  $params = array(
    'api_key'   => variable_get('scribd_api_key', NULL),
    'doc_type'  => 'pdf',
    'file'      => '@' . $filename,
    'method'    => 'docs.upload',
  );

  // Set private access.
  if (!$public) {
    $params['access'] = 'private';

    // Secure flag only gets set for private files.
    if (variable_get('scribd_secure_files', NULL)) {
      $params['secure']   = 1;
    }
  }

  $api = _scribdfield_get_api_class();
  return $api->upload($params);
}

/**
 * Disabled printing after upload.
 *
 * Can't be set in the initial upload, which is why this is a separate function.
 * http://www.scribd.com/developers/api?method_name=docs.changeSettings
 */
function scribdfield_api_disable_printing($doc_id = NULL) {
  $params = array(
    'disable_print' => 1,
  );

  $api = _scribdfield_get_api_class();
  return $api->changeSettings(array($doc_id), $params);
}


/**
 * Implementation of hook_theme().
 */
function scribdfield_theme($existing, $type, $theme, $path) {
  return array(
    'scribdfield_widget' => array(
      'arguments' => array('element' => NULL),
    ),
    'scribdfield_formatter_ipaper' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Implementation of hook_field_formatter_info().
 */
function scribdfield_field_formatter_info() {
  return array(
    'ipaper' => array(
      'label' => t('iPaper'),
      'field types' => array('filefield'),
      'description' => t('Displays uploaded Scribd.com files in iPaper.'),
    ),
  );
}

/**
 * Implementation of hook_form_[form_id]_alter().
 */
function scribdfield_form_content_field_overview_form_alter(&$form, &$form_state) {
  $form['#submit'][] = 'scribdfield_form_content_field_overview_submit';
}

/**
 * Submit handler to set a new scribdfield's formatter to "ipaper".
 */
function scribdfield_form_content_field_overview_submit(&$form, &$form_state) {
  if (isset($form_state['fields_added']['_add_new_field']) && isset($form['#type_name'])) {
    $field = content_fields($form_state['fields_added']['_add_new_field'], $form['#type_name']);
    if ($field['widget']['module'] == 'scribdfield') {
      foreach ($field['display_settings'] as $display_type => $display_settings) {
        if ($field['display_settings'][$display_type]['format'] == 'default') {
          $field['display_settings'][$display_type]['format'] = 'ipaper';
        }
      }

      content_field_instance_update($field);
    }
  }
}

/**
 * FormAPI theme function. Theme the output of an image field.
 */
function theme_scribdfield_widget($element) {
  return theme('form_element', $element, $element['#children']);
}

/**
 * Display a Scribd.com file via iPaper.
 */
function theme_scribdfield_formatter_ipaper($element) {
  if (is_array($element['#item']['data'])) {
    $secure_files = variable_get('scribd_secure_files', NULL);
    $api_secret = variable_get('scribd_api_secret', NULL);

    $data = $element['#item']['data'];

    $output = array(
      '<script type="text/javascript" src="http://www.scribd.com/javascripts/view.js"></script>',
      '<div id="embedded_flash" class="collapsible collapsed"></div>',
      '<script type="text/javascript">',
      'var scribd_doc = scribd.Document.getDoc("' . $data['scribd_doc_id'] . '", "' . $data['scribd_access_key'] . '");',
      'scribd_doc.addParam("jsapi_version", 1);',
    );

    // For secure files, we need to sign the request with a MD5 hash.
    if (!$data['public'] && $secure_files) {
      // Bail if we don't have the API secret.
      if (!$api_secret) {
        drupal_set_message(t('Scribd API secret must be entered to view secure PDFs.'), 'warning');
        return;
      }

      global $user;
      $user_id = $user->uid;
      $session_id = ($user->sid) ? $user->sid : $_SERVER['REQUEST_TIME'];
      $string_for_md5 =
        $api_secret .
        'document_id' . $data['scribd_doc_id'] .
        'session_id' . $session_id .
        'user_identifier' . $user_id;
      $hash = md5($string_for_md5);

      $output[] = 'scribd_doc.grantAccess("' . $user_id . '", "' . $session_id . '", "' . $hash . '");';
    }

    $output[] = 'scribd_doc.write("embedded_flash");';
    $output[] = '</script>';

    return implode("\n", $output);
  }
}

/**
 * Utility function to get an instance of the Scribd API class.
 */
function _scribdfield_get_api_class() {
  static $api;
  if ($api instanceof Scribd) {
    return $api;
  }
  require_once drupal_get_path('module', 'scribdfield') . '/includes/scribd.php';
  $api = new Scribd(variable_get('scribd_api_key', NULL), variable_get('scribd_api_secret', NULL));
  return $api;
}
